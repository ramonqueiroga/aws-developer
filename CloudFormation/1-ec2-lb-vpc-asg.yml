#when creating a VPC, we have to specify a subnet and link the security group and VPC with a NetworkInterface. After this, associate the NetworkInterface with the EC2 Instance
Mappings:
  VpcMapping:
    Vpc:
      "Ip": "10.0.0.0/16"
    OpenCIDR:
      "Ip": "0.0.0.0/0"
    SubnetOne:
      "Ip": "10.0.1.0/24"
    SubnetTwo:
      "Ip": "10.0.2.0/24"

Parameters:
  MyKeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: key-pair-cloudformation
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro 
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
  MyAMI:
    Description: Choose the image to create the machine
    Type: String
    AllowedValues:
    - ami-003449ffb2605a74c

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ VpcMapping, Vpc, Ip ]

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap [ VpcMapping, SubnetOne, Ip ]
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap [ VpcMapping, SubnetTwo, Ip ]
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: !FindInMap [ VpcMapping, OpenCIDR, Ip ]
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
 
  #SECURITY GROUPS
  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP security group
      GroupName: HTTP Group Name Replacement
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecurityGroup
      VpcId: !Ref 'VPC'
  
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH security group
      GroupName: SSH Group Name Replacement
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ VpcMapping, OpenCIDR, Ip ]
      VpcId: !Ref 'VPC'

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Securirty Group
      GroupName: Load Balancer Security Group
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - CidrIp: !FindInMap [ VpcMapping, OpenCIDR, Ip ]
        IpProtocol: -1   

  #NETWORK INTERFACES (LINK THE EC2 WITH THE VPC NETWORK AND AZs)
  NewNetWorkInterfaceOne:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !Ref HTTPSecurityGroup
        - !Ref SSHSecurityGroup
      SubnetId: !Ref PublicSubnetOne
      Description: "Network for subnet one"
      SourceDestCheck: 'false'

  NewNetWorkInterfaceTwo:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !Ref HTTPSecurityGroup
        - !Ref SSHSecurityGroup
      SubnetId: !Ref PublicSubnetTwo
      Description: "Network for subnet two"
      SourceDestCheck: 'false'      
    
  #EC2 INSTANCE WITH A USER DATA
  # MyNewEC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !Ref MyAMI
  #     InstanceType: !Ref InstanceType
  #     KeyName: !Ref MyKeyPair
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 0
  #         - Fn::GetAZs: {Ref: 'AWS::Region'}
  #     NetworkInterfaces: 
  #       - NetworkInterfaceId: !Ref NewNetWorkInterfaceOne
  #         DeviceIndex: 0
  #     UserData:
  #       Fn::Base64:
  #         !Sub |
  #             #!/bin/bash
  #             yum update -y
  #             yum install -y httpd.x86_64
  #             systemctl start httpd.service
  #             systemctl enable httpd.service
  #             echo "Hello world from $(hostname -f)" > /var/www/html/index.html

  # LOAD BALANCER
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'LBSecurityGroup']

  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'first-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - MyLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'LBTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'MyLoadBalancer'
      Port: 80
      Protocol: HTTP

  #AUTO SCALING GROUP
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref MyLaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 30
      VPCZoneIdentifier:
      - !Ref PublicSubnetOne
      - !Ref PublicSubnetTwo
      TargetGroupARNs:
      - !Ref LBTargetGroup

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      Cooldown: '30'
      ScalingAdjustment: '1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref MyAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      Cooldown: '30'
      ScalingAdjustment: '-1'
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Alarm if CPU too low or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
      - Ref: ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref MyAutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization      
 
  MyLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Description: My first launch configuration from CloudFormation
    Properties:
      ImageId: !Ref MyAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref MyKeyPair
      LaunchConfigurationName: MyFirstLCFromCloudFormation
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroups:
      - !Ref HTTPSecurityGroup
      - !Ref SSHSecurityGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '50'
      - DeviceName: "/dev/sdc"
        VirtualName: ephemeral0
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash
              yum update -y
              yum install -y httpd.x86_64
              systemctl start httpd.service
              systemctl enable httpd.service
              echo "Hello world from $(hostname -f)" > /var/www/html/index.html

  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  
  RootInstanceProfile:
          Type: "AWS::IAM::InstanceProfile"
          Properties:
            Path: "/"
            Roles:
              -
                !Ref RootRole
      
