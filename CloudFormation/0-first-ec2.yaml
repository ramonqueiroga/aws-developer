#when creating a VPC, we have to specify a subnet and link the security group and VPC with a NetworkInterface. After this, associate the NetworkInterface with the EC2 Instance

Parameters:
  MyKeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: key-pair-cloudformation
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
 
  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP security group
      GroupName: HTTP Group Name Replacement
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecurityGroup
      VpcId: !Ref 'VPC'
  
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH security group
      GroupName: SSH Group Name Replacement
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      VpcId: !Ref 'VPC'      
      
  NewNetWorkInterfaceOne:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !Ref HTTPSecurityGroup
        - !Ref SSHSecurityGroup
      SubnetId: !Ref PublicSubnetOne
      Description: "Network for subnet one"
      SourceDestCheck: 'false'

  NewNetWorkInterfaceTwo:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !Ref HTTPSecurityGroup
        - !Ref SSHSecurityGroup
      SubnetId: !Ref PublicSubnetTwo
      Description: "Network for subnet two"
      SourceDestCheck: 'false'      
    
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-003449ffb2605a74c"
      InstanceType: "t2.micro"
      KeyName: !Ref MyKeyPair
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      NetworkInterfaces: 
        - NetworkInterfaceId: !Ref NewNetWorkInterfaceOne
          DeviceIndex: 0
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash
              yum update -y
              yum install -y httpd.x86_64
              systemctl start httpd.service
              systemctl enable httpd.service
              echo "Hello world from $(hostname -f)" > /var/www/html/index.html

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'LBSecurityGroup']

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Securirty Group
      GroupName: Load Balancer Security Group
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1   

  LBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'first-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      Targets:
        - Id: !Ref MyEC2Instance

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - MyLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'LBTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'MyLoadBalancer'
      Port: 80
      Protocol: HTTP
